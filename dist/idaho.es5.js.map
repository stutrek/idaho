{"version":3,"file":"idaho.es5.js","sources":["../src/State.ts","../src/Machine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\n\nimport { Machine } from './Machine';\n\nexport interface IState<StateDataT, MachineT> {\n    new (machine: MachineT): State<StateDataT, MachineT>;\n}\n\ninterface Events<StateDataT, MachineT> {\n    change: State<StateDataT, MachineT>;\n}\n\nexport class State<StateDataT, MachineT> {\n    constructor(private machine: Machine<State<StateDataT, MachineT>>) {\n        const emitter = new EventEmitter();\n        this.on = emitter.on.bind(emitter);\n        this.off = emitter.off.bind(emitter);\n        this.emit = emitter.emit.bind(emitter);\n    }\n\n    data: StateDataT | undefined;\n    effects: (() => Function | undefined)[] | undefined;\n\n    private dataUpdatePromise: Promise<void> | undefined;\n\n    on: <K extends keyof Events<StateDataT, MachineT>>(eventName: K, data: StateDataT) => void;\n    off: <K extends keyof Events<StateDataT, MachineT>>(eventName: K, data: StateDataT) => void;\n    private emit: <K extends keyof Events<StateDataT, MachineT>>(\n        eventName: K,\n        data: StateDataT\n    ) => void;\n\n    setData(newData: Partial<StateDataT>) {\n        this.data = {\n            ...this.data,\n            ...newData,\n        };\n        if (this.dataUpdatePromise === undefined) {\n            this.dataUpdatePromise = Promise.resolve().then(() => {\n                this.dataUpdatePromise = undefined;\n                this.emit('change', this.data);\n            });\n        }\n    }\n}\n","import { State, IState } from './State';\nimport { EventEmitter } from 'events';\n\ninterface Events<StatesT> {\n    transition: Machine<StatesT>;\n    'child-transition': Machine<StatesT>;\n}\n\nexport class Machine<StatesT> {\n    constructor(public State?: IState<any, any>, public parent?: Machine<any>) {\n        const emitter = new EventEmitter();\n        this.on = emitter.on.bind(emitter);\n        this.off = emitter.off.bind(emitter);\n        this.emit = emitter.emit.bind(emitter);\n\n        // @ts-ignore\n        if (State === undefined && this.constructor.initialState !== undefined) {\n            // @ts-ignore\n            this.transition(this.constructor.initialState);\n        } else if (State !== undefined) {\n            this.transition(State);\n        } else {\n            throw new Error('Machine needs either a state passed it on an initialState');\n        }\n    }\n\n    histories = new Map<IState<any, any>, State<any, any>>();\n\n    effectClearers: (Function | undefined)[] = [];\n\n    static initialState?: IState<any, any>;\n    current: State<any, any>;\n\n    on: <K extends keyof Events<StatesT>>(eventName: K, state: StatesT) => void;\n    off: <K extends keyof Events<StatesT>>(eventName: K, state: StatesT) => void;\n    private emit: <K extends keyof Events<StatesT>>(eventName: K, state: StatesT) => void;\n\n    transition(NextState: IState<any, any>) {\n        for (const clearer of this.effectClearers) {\n            if (clearer) {\n                clearer();\n            }\n        }\n        if (this.histories.has(NextState)) {\n            this.current = this.histories.get(NextState);\n        } else {\n            this.current = new NextState(this);\n        }\n        if (this.current.effects) {\n            this.effectClearers = this.current.effects.map(effect => effect());\n        } else {\n            this.effectClearers = [];\n        }\n\n        // @ts-ignore\n        this.emit('transition', this);\n        if (this.parent) {\n            this.parent.receiveChildTransition(this);\n        }\n    }\n\n    receiveChildTransition(machine: Machine<any>) {\n        // @ts-ignore\n        this.emit('child-transition', machine);\n        if (this.parent) {\n            this.parent.receiveChildTransition(machine);\n        }\n    }\n}\n"],"names":[],"mappings":"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"}